" 
" 安装各种必要插件的同时，尽量避免对vim做太多的改动
"
" Filename: dot-vimrc
" Author:   Alex cyy0523xc@gmail.com
" Usage:    bash install.sh
" Version:  2016-09-26
" See:      README.md
"

" 设置自动换行
set wrap

" 基础配置
set number

" 去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
set nocompatible

" 检测文件的类型
filetype on 

" 记录历史的行数
set history=1000 

" 语法高亮度显示
syntax on 
"autocmd InsertLeave * se nocul  " 用浅色高亮当前行  
"autocmd InsertEnter * se cul    " 用浅色高亮当前行  

set autoread
set cursorline        "突出显示当前行"
set cursorcolumn      "突出显示当前列"

" 下面两行在进行编写代码时，在格式对起上很有用；
" 第一行，vim使用自动对起，也就是把当前行的对起格式应用到下一行；
" 第二行，依据上面的对起格式，智能的选择对起方式，对于类似C语言编
set autoindent
set smartindent

" 第一行设置tab键为4个空格，第二行设置当行之间交错时使用4个空格
set tabstop=4
set shiftwidth=4

" 替换tab为空格
set expandtab

" 设置匹配模式，类似当输入一个左括号时会匹配相应的那个右括号
set showmatch

" 当vim进行编辑时，如果命令错误，会发出一个响声，该设置去掉响声
set vb t_vb=

" 在编辑过程中，在右下角显示光标位置的状态行
set ruler

" 默认情况下，寻找匹配是高亮度显示的，该设置关闭高亮显示
set nohls

" gui设置不显示工具/菜单栏
set guioptions-=T
set guioptions-=m
set guioptions-=L
set guioptions-=r
set guioptions-=b
" 使用内置 tab 样式而不是 gui
set guioptions-=e
"set nolist
"
" gui设置关闭各种按键叮叮声音和闪屏
set vb t_vb=
au GuiEnter * set t_vb=

" 查询时非常方便，如要查找book单词，当输入到/b时，会自动找到第一
" 个b开头的单词，当输入到/bo时，会自动找到第一个bo开头的单词，依
" 次类推，进行查找时，使用此设置会快速找到答案，当你找要匹配的单词
" 时，别忘记回车
set incsearch

" 取消代码折叠
set nofoldenable

" 配色方案
" 注意已经将相应的配置文件复制到~/.vim/colors目录下，否则会报错
set background=dark
"colorscheme solarized
colorscheme molokai

let g:molokai_original = 1

" 让vim记忆上次编辑的位置
autocmd BufReadPost *
            \ if line("'\"")>0&&line("'\"")<=line("$") |
            \    exe "normal g'\"" |
            \ endif

" 使用tt快捷键，快速替换tab为4个空格
nmap <Leader>tt :%s/\t/    /g<CR>


"--------------------------------------------------------------
"-------------------------- 插件 ------------------------------
"--------------------------------------------------------------

filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle  
Bundle 'gmarik/vundle'

" 依赖
" 设置快捷键：Ctrl + F
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'tomtom/tlib_vim'
if executable('ag')
    Bundle 'mileszs/ack.vim'
    let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'
    map <c-f> :Ack<space>
elseif executable('ack-grep')
    let g:ackprg="ack-grep -H --nocolor --nogroup --column"
    Bundle 'mileszs/ack.vim'
    map <c-f> :Ack<space>
elseif executable('ack')
    Bundle 'mileszs/ack.vim'
    map <c-f> :Ack<space>
endif

" General
Bundle 'scrooloose/nerdtree'
Bundle 'jiangmiao/auto-pairs'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
Bundle 'ctrlpvim/ctrlp.vim'

" 编程基础插件
Bundle 'scrooloose/syntastic'
Bundle 'tpope/vim-fugitive'
Bundle 'mattn/webapi-vim'
Bundle 'mattn/gist-vim'
Bundle 'scrooloose/nerdcommenter'
Bundle 'tpope/vim-commentary'
Bundle 'luochen1990/rainbow'
if executable('ctags')
    Bundle 'majutsushi/tagbar'
endif

" Tagbar配置
" http://majutsushi.github.io/tagbar/
" 对各种编程语言的支持：https://github.com/majutsushi/tagbar/wiki
let g:tagbar_autofocus=1
let g:tagbar_autoclose=1
map <F3> :TagbarToggle<CR>
let g:tagbar_type_go = {
            \ 'ctagstype': 'go',
            \ 'kinds' : [
            \   'p:package',
            \   'f:function',
            \   'v:variables',
            \   't:type',
            \   'c:const'
            \ ]
            \}


" vim-commentary设置
" 设置Python注释字符
autocmd FileType python,shell set commentstring=#\ %s 
autocmd FileType mako set cms=##\ %s

"map <C-e> <plug>NERDTreeTabsToggle<CR>
map <leader>e :NERDTreeFind<CR>
"nmap <leader>nt :NERDTreeFind<CR>

let NERDTreeShowBookmarks=1
let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$', '.ropeproject']
let NERDTreeChDirMode=0
let NERDTreeQuitOnOpen=1
let NERDTreeMouseMode=2
let NERDTreeShowHidden=1
let NERDTreeKeepTreeInNewTab=1
let g:nerdtree_tabs_open_on_gui_startup=0

" power-line
Bundle 'Lokaltog/vim-powerline'
Bundle 'powerline/fonts'
set laststatus=2
set t_Co=256
let g:Powerline_symbols='unicode'
set encoding=utf-8

" tabular
Bundle 'tpope/vim-pathogen'
Bundle 'godlygeek/tabular'

" tabular常用快捷键设置
nmap <Leader>\& :Tabularize /&<CR>
vmap <Leader>\& :Tabularize /&<CR>
nmap <Leader>\= :Tabularize /^[^=]*\zs=<CR>
vmap <Leader>\= :Tabularize /^[^=]*\zs=<CR>
nmap <Leader>\=> :Tabularize /=><CR>
vmap <Leader>\=> :Tabularize /=><CR>
nmap <Leader>\: :Tabularize /:<CR>
vmap <Leader>\: :Tabularize /:<CR>
nmap <Leader>\:: :Tabularize /:\zs<CR>
vmap <Leader>\:: :Tabularize /:\zs<CR>
nmap <Leader>\, :Tabularize /,<CR>
vmap <Leader>\, :Tabularize /,<CR>
nmap <Leader>\,, :Tabularize /,\zs<CR>
vmap <Leader>\,, :Tabularize /,\zs<CR>
nmap <Leader>\<Bar> :Tabularize /<Bar><CR>
vmap <Leader>\<Bar> :Tabularize /<Bar><CR>

" 快速切换括号引号或者标签
Bundle 'tpope/vim-surround'
Bundle 'mattn/emmet-vim'

" markdown
Plugin 'plasticboy/vim-markdown'
let g:vim_markdown_conceal = 0
let g:vim_markdown_new_list_item_indent = 2
"Bundle 'tpope/vim-markdown'
"let g:vim_markdown_frontmatter=1

" 自动补全
"Bundle 'garbas/vim-snipmate'
"Bundle 'honza/vim-snippets'
Bundle 'Valloric/YouCompleteMe'
Bundle 'SirVer/ultisnips'
Bundle 'honza/vim-snippets'
let g:ycm_python_binary_path = '/usr/bin/python3'

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
" autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
" autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
" autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc


" PHP
"Bundle 'arnaud-lb/vim-php-namespace'

" Python
Bundle 'klen/python-mode'
Bundle 'yssource/python.vim'
Bundle 'python_match.vim'
Bundle 'pythoncomplete'
Bundle 'Yggdroot/indentLine'
Bundle 'tell-k/vim-autopep8'
let g:pymode_python = 'python3'
let g:pymode_options = 1
let g:pymode_indent = 1
let g:syntastic_python_python_exec = 'python3'

" 缩进指示线"
let g:indentLine_char='┆'
let g:indentLine_enabled = 1

" autopep8设置"
let g:autopep8_disable_show_diff=1

" Javascript
"Bundle 'elzr/vim-json'
"Bundle 'groenewege/vim-less'
"Bundle 'pangloss/vim-javascript'
"Bundle 'briancollins/vim-jst'
"Bundle 'kchmck/vim-coffee-script'

" React
"Bundle 'mxw/vim-jsx'
" 默认只对jsx后缀有效，下面的设置可以让js后缀也有效
"let g:jsx_ext_required = 0

" HTML
" vim-haml: This project contains the runtime files for Haml, Sass, and SCSS that ship with Vim.
" Bundle 'amirh/HTML-AutoCloseTag'
"Bundle 'heracek/HTML-AutoCloseTag'
"Bundle 'hail2u/vim-css3-syntax'
"Bundle 'gorodinskiy/vim-coloresque'
"Bundle 'tpope/vim-haml'
"Bundle 'othree/html5.vim'
"Bundle 'nono/jquery.vim'

" Go
Bundle 'fatih/vim-go'
let g:go_version_warning = 0

" Elixir
"Bundle 'elixir-lang/vim-elixir'
"Bundle 'carlosgaldino/elixir-snippets'
"Bundle 'mattreduce/vim-mix'

filetype plugin indent on

"--------------------------------------------------------------
"-------------------------- 插件 ------------------------------
"--------------------------------------------------------------

" 导入本地vim配置文件
if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
endif


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""" 新文件标题
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 新建.c,.h,.sh,.java文件，自动插入文件头 
autocmd BufNewFile *.cpp,*.[ch],*.sh,*.rb,*.java,*.py,*.php exec ":call SetTitle()" 
" 定义函数SetTitle，自动插入文件头 
func SetTitle() 
    "如果文件类型为.sh文件 
    let username = system("echo $USER")
    let username = username[:-2]
    if &filetype == 'sh' 
        call setline(1,"\#!/bin/bash") 
        call append(line("."), "\# ") 
        call append(line(".")+1, "\# ") 
        call append(line(".")+2, "\# Author: ".username) 
        call append(line(".")+3, "\# Created Time: ".strftime("%c")) 
        call append(line(".")+4, "") 
    elseif &filetype == 'python'
        call setline(1,"# -*- coding: utf-8 -*-")
        call append(line("."),"\# ")
        call append(line(".")+1, "\# ") 
        call append(line(".")+2, "\# Author: ".username) 
        call append(line(".")+3, "\# Created Time: ".strftime("%c")) 
        call append(line(".")+4, "") 
    elseif &filetype == 'php'
        call setline(1,"<?php")
        call append(line("."),"/**")
        call append(line(".")+1, " * ") 
        call append(line(".")+2, " * ") 
        call append(line(".")+3, " * @author  ".username) 
        call append(line(".")+4, " * @created ".strftime("%c")) 
        call append(line(".")+5, " */") 
        call append(line(".")+6, "") 
        call append(line(".")+7, "") 
    elseif &filetype == 'go'
        call setline(1, "/**************************************************") 
        call append(line("."), "	> File Name: ".expand("%")) 
        call append(line(".")+1, "	> Author: ".username) 
        call append(line(".")+2, "	> Mail: ") 
        call append(line(".")+3, "	> Created Time: ".strftime("%c")) 
        call append(line(".")+4, "**************************************************/") 
        call append(line(".")+5, "package main")
        call append(line(".")+6, "")
        call append(line(".")+7, "import ()")
        call append(line(".")+8, "")
        call append(line(".")+9, "")
    elseif &filetype == 'ruby'
        call setline(1,"#!/usr/bin/env ruby")
        call append(line("."),"# encoding: utf-8")
        call append(line(".")+1, "")

        "    elseif &filetype == 'mkd'
        "        call setline(1,"<head><meta charset=\"UTF-8\"></head>")
    else 
        call setline(1, "/**************************************************") 
        call append(line("."), "	> File Name: ".expand("%")) 
        call append(line(".")+1, "	> Author: ".username) 
        call append(line(".")+2, "	> Mail: ") 
        call append(line(".")+3, "	> Created Time: ".strftime("%c")) 
        call append(line(".")+4, "**************************************************/") 
        call append(line(".")+5, "")
    endif
    if expand("%:e") == 'cpp'
        call append(line(".")+6, "#include<iostream>")
        call append(line(".")+7, "using namespace std;")
        call append(line(".")+8, "")
    endif
    if &filetype == 'c'
        call append(line(".")+6, "#include<stdio.h>")
        call append(line(".")+7, "")
    endif
    if expand("%:e") == 'h'
        call append(line(".")+6, "#ifndef _".toupper(expand("%:r"))."_H")
        call append(line(".")+7, "#define _".toupper(expand("%:r"))."_H")
        call append(line(".")+8, "#endif")
    endif
    if &filetype == 'java'
        call append(line(".")+6,"public class ".expand("%:r"))
        call append(line(".")+7,"")
    endif
    "新建文件后，自动定位到文件末尾
endfunc 
autocmd BufNewFile * normal G

